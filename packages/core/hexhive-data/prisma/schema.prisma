// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  displayId String? //TODO Delete soon

  name String?
  
  email String? @unique
  password String? 

  lastOrganisation String?
  
  inactive Boolean @default(true)

  organisations UserTrust[] @relation(name: "trusts")
}

model UserTrust {
  id String @id

  trust User @relation(name: "trusts", fields: [trustId], references: [id], onDelete: Cascade)
  trustId String

  issuer Organisation @relation(name: "issuedTrust", fields: [issuerId], references: [id], onDelete: Cascade)
  issuerId String

  type String @default("User")

  accepted Boolean @default(false)
  inactive Boolean @default(false)

  roles Role[] @relation(name: "hasRole")
  permissions Permission[] @relation(name: "hasPermission")

  createdAt DateTime @default(now())

  @@unique([trustId, issuerId])
}

model Organisation {
  id String @id
  name String

  trustsUsers UserTrust[] @relation(name: "issuedTrust")

  apiKeys APIKey[] @relation(name: "hasAPIKey")
  
  roles Role[]
  applications Application[]
  permissions Permission[]
  policies PermissionPolicy[]
}

model APIKey {
  id String @id
  name String
  apiKey String
  
  organisation Organisation @relation(name: "hasAPIKey", fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId String
}

model Application {
  id String @id
  name String

  slug String?

  backend_url String?
  
  entrypoint String?
  staging_entrypoint String?

  users Organisation[]
  usedInRoles Role[]
  usedInPermissions Permission[]

  serviceAccounts ApplicationServiceAccount[] @relation(name: "hasServiceAccount")
}

model ApplicationServiceAccount {
  id String @id
  name String
  apiKey String

  application Application @relation(name: "hasServiceAccount", references: [id], fields: [applicationId])
  applicationId String
}

model Role {
  id String @id
  name String

  applications Application[]
  permissions Permission[]

  usedBy UserTrust[] @relation(name: "hasRole")

  organisationId String
  organisation Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
}

model Permission {
	id String @id 
	name String

  scope Application? @relation(fields: [scopeId], references: [id])
  scopeId String?

  policies PermissionPolicy[]

  usedInRoles Role[]
  usedInTrust UserTrust[] @relation(name: "hasPermission")

  organisationId String
  organisation Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
}

model PermissionPolicy {
  id String @id
  name String

  verbs String[]
  resource String?
  conditions Json?
  effect String @default("Allow")
  
  usedInPermissions Permission[]

  organisationId String
  organisation Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
}