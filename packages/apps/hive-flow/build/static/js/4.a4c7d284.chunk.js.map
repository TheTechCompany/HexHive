{"version":3,"sources":["views/timeline/Header.tsx","views/timeline/Timeline.tsx"],"names":["TimelineHeader","props","round","background","pad","direction","align","justify","weight","placeholder","plain","value","view","onChange","option","onViewChange","options","formatter","Intl","NumberFormat","style","currency","BaseTimeline","useState","setView","Date","date","setDate","horizon","setHorizon","id","color","name","start","end","data","quotes","useQuery","suspense","staleWhileRevalidate","QuoteMany","map","quote","moment","startOf","valueOf","endOf","showLabel","format","price","stringToColor","useEffect","get","filterData","filter","item","flex","gap","overflow","resizable","mode","links","weeks","reduce","previous","current","console","log","getTime","Object","keys","ix","parseInt","add","getWeeks","onHorizonChange","itemheight"],"mappings":"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","file":"static/js/4.a4c7d284.chunk.js","sourcesContent":["import { Box, Text, Select } from 'grommet';\r\nimport React from 'react';\r\n\r\nexport type TimelineView = \"Projects\" | \"Estimates\";\r\nexport const TimelineHeader : React.FC<{view?: TimelineView, onViewChange?: (view: TimelineView) => void}> = (props) => {\r\n    return (\r\n        <Box\r\n            round=\"xsmall\"\r\n            background=\"accent-1\"\r\n            pad={'xsmall'}\r\n            direction=\"row\"\r\n            align=\"center\"\r\n            justify=\"between\">\r\n           <Text weight=\"bold\">\r\n                Timeline\r\n            </Text> \r\n            <Box background=\"#ffffff42\" round=\"xsmall\">\r\n            <Select \r\n                placeholder=\"View\"\r\n                plain\r\n                value={props.view || \"Projects\"}\r\n                onChange={({option}) => {\r\n                    props.onViewChange?.(option)\r\n                }}\r\n                options={[\"Projects\", \"Estimates\"]} />\r\n            </Box>\r\n        </Box>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport {Timeline} from '@hexhive/ui'\r\n//import utils from '../../utils';\r\nimport moment from 'moment';\r\nimport { stringToColor } from '@hexhive/utils';\r\nimport { Box, Select, Text } from 'grommet';\r\nimport { useQuery } from '../../gqless';\r\nimport { TimelineHeader, TimelineView } from './Header';\r\n\r\ninterface TimelineProps {\r\n\r\n}\r\n\r\nvar formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD'\r\n  });\r\n\r\nconst BaseTimeline : React.FC<TimelineProps> = (props) => {\r\n\r\n    const [ view, setView ] = useState<TimelineView>(\"Projects\");\r\n\r\n    const [ date, setDate ] = useState<Date>(new Date())\r\n    const [ horizon, setHorizon ] = useState<{start: Date, end: Date} | undefined>()\r\n\r\n    const [ data, setData ] = useState<any[]>([\r\n        {\r\n            id: 3,\r\n            color: 'purple',\r\n            name: \"Test\",\r\n            start: new Date(2021, 2, 12),\r\n            end: new Date(2021, 5, 9)\r\n          },\r\n          {\r\n            id: 2,\r\n            color: 'orange',\r\n            name: \"Test\",\r\n            start: new Date(2021, 7, 12),\r\n            end: new Date(2021, 12, 9)\r\n          }\r\n    ])\r\n\r\n\r\n    const query = useQuery({\r\n        suspense: false,\r\n        staleWhileRevalidate: true\r\n    })\r\n\r\n    const quotes = query.QuoteMany()?.map((quote) => ({\r\n        start: new Date(moment(quote?.date).startOf('isoWeek').valueOf()),\r\n        end: new Date(moment(quote?.date).endOf('isoWeek').valueOf()),\r\n        ...quote,\r\n        showLabel: formatter.format((quote as any).price),\r\n        color: stringToColor(quote?.name || '')\r\n    }))\r\n\r\n    useEffect(() => {\r\n        // utils.quote.getAll().then((quotes) => {\r\n            \r\n        //   setData(quotes.map((x: any) => \r\n        //   {\r\n        //       let start = new Date(moment(x.StartDate).startOf('isoWeek').valueOf())\r\n        //       let end =  new Date(moment(start).add(7, 'days').valueOf())\r\n\r\n        //       console.log(start, end)\r\n        //   return {\r\n        //        id: `${x?.QuoteID}`, \r\n        //        status: x?.Status,\r\n        //        color: stringToColor(x?.Name), \r\n        //        name: x?.Name, \r\n        //        start: start,\r\n        //        showLabel: formatter.format(parseInt(x?.TotalLinePrice?.toFixed(0) || 0)),\r\n        //        end: end,\r\n        //        price: parseInt(x?.TotalLinePrice?.toFixed(0)) || 0 \r\n        //     }\r\n        //   }))\r\n        // })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let year = moment(horizon?.start).get('year')\r\n        let oldYear = moment(date).get('year')\r\n        if(year != oldYear){\r\n            if(horizon?.start) setDate(horizon?.start)\r\n\r\n            // utils.quote.fetchMonthQuotes(year).then((quotes) => {\r\n            //     console.log(quotes)\r\n\r\n            //     setData(quotes.map((x: any) => \r\n            //     {\r\n            //         let start = new Date(moment(x.StartDate).startOf('isoWeek').valueOf())\r\n            //         let end =  new Date(moment(start).add(7, 'days').valueOf())\r\n      \r\n            //         console.log(start, end)\r\n            //     return {\r\n            //          id: `${x?.QuoteID}`, \r\n            //          status: x?.Status,\r\n            //          color: stringToColor(x?.Name), \r\n            //          name: x?.Name, \r\n            //          start: start,\r\n            //          showLabel: formatter.format(parseInt(x?.TotalLinePrice?.toFixed(0) || 0)),\r\n            //          end: end,\r\n            //          price: parseInt(x?.TotalLinePrice?.toFixed(0)) || 0 \r\n            //       }\r\n            //     }))\r\n\r\n            // })\r\n        }\r\n    }, [horizon?.start])\r\n\r\n    const getWeeks = () => {\r\n        const weeks = filterData()?.reduce((previous, current) => {\r\n            console.log(current)\r\n            let start = current.start.getTime();\r\n            if(!previous[start]) previous[start] = 0;\r\n            previous[start] += current.price \r\n            return previous\r\n        }, {})  \r\n        console.log(weeks)\r\n        return Object.keys(weeks).map((start, ix) => {\r\n            return {\r\n                id: start,\r\n                name: `Week ${moment(new Date(parseInt(start))).format(\"W\")}`,\r\n                color: stringToColor(moment(new Date(parseInt(start))).format(\"DD/mm/yyyy\")),\r\n                start: new Date(parseInt(start)),\r\n                end: new Date(moment(new Date(parseInt(start))).add(7, 'days').valueOf()),\r\n                showLabel: formatter.format(weeks[start])\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    const onHorizonChange = (start: any, end: any) => {\r\n        console.log(\"Horizon\", start, end)\r\n        setHorizon({start, end})\r\n\r\n        // let result = DATA.filter((item) => {\r\n        //   return (item.start < start && item.end > end) || (item.start > start && item.start < end) || (item.end > start && item.end < end);\r\n        // });\r\n        // console.log('Calculating ');\r\n        // this.setState({ data: result });\r\n      };\r\n\r\n      const filterData = () => {\r\n        if(horizon && horizon.start && horizon.end){\r\n        return quotes?.filter((item) => {\r\n            return (item.start < horizon.start && item.end > horizon.end) || (item.start > horizon.start && item.start < horizon.end) || (item.end > horizon.start && item.end < horizon.end);\r\n          });\r\n        }else{\r\n            return data;\r\n        }   \r\n    }\r\n    return (\r\n        <Box    \r\n            flex\r\n            gap=\"xsmall\" direction=\"column\">\r\n        <TimelineHeader \r\n            view={view}\r\n            onViewChange={(view) => setView(view)}/>\r\n\r\n        <Box \r\n        \r\n            overflow=\"hidden\"\r\n            flex \r\n            round=\"small\">\r\n        <Timeline \r\n            resizable\r\n            mode=\"month\"\r\n            links={[]}\r\n            data={getWeeks()}\r\n            date={date}\r\n            onHorizonChange={onHorizonChange}\r\n            itemheight={30}\r\n            />\r\n        </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default BaseTimeline;"],"sourceRoot":""}