name: Infrastructure

on:
  push:
    branches:
      - master
    paths: [".github/workflows/infrastructure.yml", "packages/infrastructure/apps/**", "packages/infrastructure/db/**", "packages/core/**", "packages/backends/**"]

concurrency: infra-${{ github.ref }}

jobs:
  build_admin:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            thetechcompany/hexhive-admin
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to dockerhub
        uses: docker/login-action@v1
        with: 
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push 
        id: docker_build
        uses: docker/build-push-action@v2
        with: 
          context: .
          file: ./packages/backends/hive-admin/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_ENV=github
  
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  build_frontend-server:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            thetechcompany/hexhive-frontend-server
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to dockerhub
        uses: docker/login-action@v1
        with: 
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push 
        id: docker_build
        uses: docker/build-push-action@v2
        with: 
          context: .
          file: ./packages/backends/hive-frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_ENV=github
  
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  
  build_gateway:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            thetechcompany/hexhive-gateway
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to dockerhub
        uses: docker/login-action@v1
        with: 
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push 
        id: docker_build
        uses: docker/build-push-action@v2
        with: 
          context: .
          file: ./packages/backends/hive-gateway/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_ENV=github
  
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}


  push_gateway_infra:
    name: Update Pulumi Infra
    runs-on: ubuntu-latest
    needs: [build_gateway, build_frontend-server]
    env:
      COMMAND_MONGO_URL: ${{ secrets.COMMAND_MONGO_URL }}
      COMMAND_MONGO_DB: ${{ secrets.COMMAND_MONGO_DB }}
      COMMAND_MONGO_USER: ${{ secrets.COMMAND_MONGO_USER }}
      COMMAND_MONGO_PASS: ${{ secrets.COMMAND_MONGO_PASS }}
      COMMAND_MONGO_AUTH_DB: ${{ secrets.COMMAND_MONGO_AUTH_DB }}
      RABBIT_URL: ${{ secrets.RABBIT_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWKS_KEYS: ${{ secrets.JWKS_KEYS }}
      TIMESERIES_HOST: ${{ secrets.TIMESERIES_HOST }}
      TIMESERIES_PASSWORD: ${{ secrets.TIMESERIES_PASSWORD }}
      PRIVATE_KEY: ${{ secrets.GATEWAY_PRIVATE_KEY }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - run: echo "FRONTEND_IMAGE=sha-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - run: echo "GATEWAY_IMAGE=sha-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ap-southeast-2
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - run: yarn
        working-directory: ./packages/infrastructure/apps

      - name: Setup stack
        run: |
          echo "STACK_NAME=ultraviolet/staging" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/staging' }}
      
      - name: Setup stack
        run: |
          echo "STACK_NAME=ultraviolet/next" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/next' }}

      - name: Setup stack
        run: |
          echo "STACK_NAME=ultraviolet/production" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/master' }}
        
      - name: Update infrastructure
        uses: pulumi/actions@v3
        with:
          command: up
          stack-name: ${{ env.STACK_NAME }}
          work-dir: ./packages/infrastructure/apps
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-southeast-2
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}


  preview-db:
    name: Deploy DB Migration
    runs-on: ubuntu-latest
    needs: [build_gateway, build_frontend-server]
    env:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}  
    steps: 
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2

      - name: Setup DB stack
        run: |
          echo "DB_NAME=ultraviolet/db-staging" >> $GITHUB_ENV
          echo "DB=db-staging" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/staging' }}

      - name: Setup stack
        run: |
          echo "DB_NAME=ultraviolet/db-prod" >> $GITHUB_ENV
          echo "DB=db-prod" >> $GITHUB_ENV

        if: ${{ github.ref == 'refs/heads/next' }}

      - name: Setup stack
        run: |
          echo "DB_NAME=ultraviolet/db-prod" >> $GITHUB_ENV
          echo "DB=db-prod" >> $GITHUB_ENV

        if: ${{ github.ref == 'refs/heads/master' }}
        

      - run: pulumi stack select ultraviolet/staging
        working-directory: ./packages/infrastructure/apps

      - run: mkdir ~/.kube/

      - run: pulumi stack -s ultraviolet/prod output k3sconfig > ~/.kube/config
        working-directory: ./packages/infrastructure/base
        id: kube_config

      - run: pulumi stack select ${{ env.DB_NAME }}
        working-directory: ./packages/infrastructure/db
        
      - run: echo "::set-output name=postgres::$(pulumi stack output postgres_name )" 
        working-directory: ./packages/infrastructure/db
        id: postgres_url
      
      - run: echo "::set-output name=pass::$(pulumi stack output postgres_pass )" 
        working-directory: ./packages/infrastructure/db
        id: postgres_pass

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ap-southeast-2
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - uses: azure/setup-kubectl@v2.0
        with:
          version: "v1.23.5"

      # - run: aws eks update-kubeconfig --name hexhive-cluster-eksCluster-506b63f
      
          
      - run: kubectl --kubeconfig ~/.kube/config -n ${{ env.DB }} port-forward service/${{ steps.postgres_url.outputs.postgres }} 5432:5432 &
      
      - run: sleep 30s

      - run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:${{ steps.postgres_pass.outputs.pass }}@localhost:5432/postgres
        working-directory: ./packages/core/hexhive-data/
